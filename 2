import numpy as np
import matplotlib.pyplot as plt

class vector_potential:
    def __init__(self, C, k, V = 1):
        """
        class for scallar potential A
        A = sum_k C_k(t) exp(-i k.x) + c.c.
          = sum_k real(C_k) cos(k.x) - imag(C_k) sin(k.x)
        inputs:
        + C (numpy.ndarray): array of complex values for C_k
        + k (numpy.ndarray): array of real vector k in R^3
        Note that len(C) == len(k)
        """
        assert len(C) == len(k)
        self.C = C
        self.k = k

    def __call__(self,x):
        kx = np.dot(self.k, x)
        print(kx)
        result = np.dot(np.real(self.C), kx) \
                - np.dot(np.imag(self.C), kx)
        print(result)
        return np.sum(result)

class EMfield:
    def __init__(self, k_vectors):
        self.k_list = k_vector


V = 1

C = np.array([
    1 + 2.j, 
    2 + 1.j
    ])
k = np.array([
    [1,0,0],
    [0,1,0]
    ])

x = np.array([0.1,0.2,0.3])
A = vector_potential(C=C, k=k)

print(A(x))
